{"ast":null,"code":"import { ConsoleLogger, Amplify, clearCredentials, Hub, defaultStorage } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, assertOAuthConfig, AMPLIFY_SYMBOL, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/index.mjs';\nimport { revokeToken, globalSignOut as globalSignOut$1 } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { assertAuthTokensWithRefreshToken, assertAuthTokens } from '../utils/types.mjs';\nimport '@aws-crypto/sha256-js';\nimport { handleOAuthSignOut } from '../utils/oauth/handleOAuthSignOut.mjs';\nimport { DefaultOAuthStore } from '../utils/signInWithRedirectStore.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { OAUTH_SIGNOUT_EXCEPTION } from '../../../errors/constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('Auth');\n/**\n * Signs a user out\n *\n * @param input - The SignOutInput object\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signOut(input) {\n  var _Amplify$getConfig$Au;\n  const cognitoConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(cognitoConfig);\n  if (input !== null && input !== void 0 && input.global) {\n    await globalSignOut(cognitoConfig);\n  } else {\n    await clientSignOut(cognitoConfig);\n  }\n  let hasOAuthConfig;\n  try {\n    assertOAuthConfig(cognitoConfig);\n    hasOAuthConfig = true;\n  } catch (err) {\n    hasOAuthConfig = false;\n  }\n  if (hasOAuthConfig) {\n    var _await$handleOAuthSig;\n    const oAuthStore = new DefaultOAuthStore(defaultStorage);\n    oAuthStore.setAuthConfig(cognitoConfig);\n    const {\n      type\n    } = (_await$handleOAuthSig = await handleOAuthSignOut(cognitoConfig, oAuthStore)) !== null && _await$handleOAuthSig !== void 0 ? _await$handleOAuthSig : {};\n    if (type === 'error') {\n      throw new AuthError({\n        name: OAUTH_SIGNOUT_EXCEPTION,\n        message: 'An error occurred when attempting to log out from OAuth provider.'\n      });\n    }\n  } else {\n    // complete sign out\n    tokenOrchestrator.clearTokens();\n    await clearCredentials();\n    Hub.dispatch('auth', {\n      event: 'signedOut'\n    }, 'Auth', AMPLIFY_SYMBOL);\n  }\n}\nasync function clientSignOut(cognitoConfig) {\n  try {\n    const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();\n    assertAuthTokensWithRefreshToken(authTokens);\n    if (isSessionRevocable(authTokens.accessToken)) {\n      await revokeToken({\n        region: getRegion(cognitoConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignOut)\n      }, {\n        ClientId: cognitoConfig.userPoolClientId,\n        Token: authTokens.refreshToken\n      });\n    }\n  } catch (err) {\n    // this shouldn't throw\n    logger.debug('Client signOut error caught but will proceed with token removal');\n  }\n}\nasync function globalSignOut(cognitoConfig) {\n  try {\n    const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();\n    assertAuthTokens(authTokens);\n    await globalSignOut$1({\n      region: getRegion(cognitoConfig.userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.SignOut)\n    }, {\n      AccessToken: authTokens.accessToken.toString()\n    });\n  } catch (err) {\n    // it should not throw\n    logger.debug('Global signOut error caught but will proceed with token removal');\n  }\n}\nconst isSessionRevocable = token => {\n  var _token$payload;\n  return !!(token !== null && token !== void 0 && (_token$payload = token.payload) !== null && _token$payload !== void 0 && _token$payload.origin_jti);\n};\nexport { signOut };","map":{"version":3,"names":["logger","ConsoleLogger","signOut","input","_Amplify$getConfig$Au","cognitoConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","global","globalSignOut","clientSignOut","hasOAuthConfig","assertOAuthConfig","err","_await$handleOAuthSig","oAuthStore","DefaultOAuthStore","defaultStorage","setAuthConfig","type","handleOAuthSignOut","AuthError","name","OAUTH_SIGNOUT_EXCEPTION","message","tokenOrchestrator","clearTokens","clearCredentials","Hub","dispatch","event","AMPLIFY_SYMBOL","authTokens","getTokenStore","loadTokens","assertAuthTokensWithRefreshToken","isSessionRevocable","accessToken","revokeToken","region","getRegion","userPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","SignOut","ClientId","userPoolClientId","Token","refreshToken","debug","assertAuthTokens","globalSignOut$1","AccessToken","toString","token","_token$payload","payload","origin_jti"],"sources":["/Users/sarimyun/react-native-app/room821_homepage/room821_homepage/node_modules/@aws-amplify/auth/src/providers/cognito/apis/signOut.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, clearCredentials, ConsoleLogger, defaultStorage, Hub, } from '@aws-amplify/core';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { tokenOrchestrator } from '../tokenProvider';\nimport { AuthAction, AMPLIFY_SYMBOL, assertOAuthConfig, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { globalSignOut as globalSignOutClient, revokeToken, } from '../utils/clients/CognitoIdentityProvider';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils';\nimport { assertAuthTokens, assertAuthTokensWithRefreshToken, } from '../utils/types';\nimport { handleOAuthSignOut } from '../utils/oauth';\nimport { DefaultOAuthStore } from '../utils/signInWithRedirectStore';\nimport { AuthError } from '../../../errors/AuthError';\nimport { OAUTH_SIGNOUT_EXCEPTION } from '../../../errors/constants';\nconst logger = new ConsoleLogger('Auth');\n/**\n * Signs a user out\n *\n * @param input - The SignOutInput object\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function signOut(input) {\n    const cognitoConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(cognitoConfig);\n    if (input?.global) {\n        await globalSignOut(cognitoConfig);\n    }\n    else {\n        await clientSignOut(cognitoConfig);\n    }\n    let hasOAuthConfig;\n    try {\n        assertOAuthConfig(cognitoConfig);\n        hasOAuthConfig = true;\n    }\n    catch (err) {\n        hasOAuthConfig = false;\n    }\n    if (hasOAuthConfig) {\n        const oAuthStore = new DefaultOAuthStore(defaultStorage);\n        oAuthStore.setAuthConfig(cognitoConfig);\n        const { type } = (await handleOAuthSignOut(cognitoConfig, oAuthStore)) ?? {};\n        if (type === 'error') {\n            throw new AuthError({\n                name: OAUTH_SIGNOUT_EXCEPTION,\n                message: 'An error occurred when attempting to log out from OAuth provider.',\n            });\n        }\n    }\n    else {\n        // complete sign out\n        tokenOrchestrator.clearTokens();\n        await clearCredentials();\n        Hub.dispatch('auth', { event: 'signedOut' }, 'Auth', AMPLIFY_SYMBOL);\n    }\n}\nasync function clientSignOut(cognitoConfig) {\n    try {\n        const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();\n        assertAuthTokensWithRefreshToken(authTokens);\n        if (isSessionRevocable(authTokens.accessToken)) {\n            await revokeToken({\n                region: getRegion(cognitoConfig.userPoolId),\n                userAgentValue: getAuthUserAgentValue(AuthAction.SignOut),\n            }, {\n                ClientId: cognitoConfig.userPoolClientId,\n                Token: authTokens.refreshToken,\n            });\n        }\n    }\n    catch (err) {\n        // this shouldn't throw\n        logger.debug('Client signOut error caught but will proceed with token removal');\n    }\n}\nasync function globalSignOut(cognitoConfig) {\n    try {\n        const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();\n        assertAuthTokens(authTokens);\n        await globalSignOutClient({\n            region: getRegion(cognitoConfig.userPoolId),\n            userAgentValue: getAuthUserAgentValue(AuthAction.SignOut),\n        }, {\n            AccessToken: authTokens.accessToken.toString(),\n        });\n    }\n    catch (err) {\n        // it should not throw\n        logger.debug('Global signOut error caught but will proceed with token removal');\n    }\n}\nconst isSessionRevocable = (token) => !!token?.payload?.origin_jti;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}