{"ast":null,"code":"import { ConsoleLogger } from './Logger/ConsoleLogger.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('parseAWSExports');\nconst authTypeMapping = {\n  API_KEY: 'apiKey',\n  AWS_IAM: 'iam',\n  AMAZON_COGNITO_USER_POOLS: 'userPool',\n  OPENID_CONNECT: 'oidc',\n  NONE: 'none',\n  LAMBDA: 'lambda'\n};\n/**\n * This utility converts the `aws-exports.js` file generated by the Amplify CLI into a {@link ResourcesConfig} object\n * consumable by Amplify.\n *\n * @param config A configuration object from `aws-exports.js`.\n *\n * @returns A {@link ResourcesConfig} object.\n */\nconst parseAWSExports = (config = {}) => {\n  const {\n    aws_appsync_apiKey,\n    aws_appsync_authenticationType,\n    aws_appsync_graphqlEndpoint,\n    aws_appsync_region,\n    aws_bots,\n    aws_bots_config,\n    aws_cognito_identity_pool_id,\n    aws_cognito_sign_up_verification_method,\n    aws_cognito_mfa_configuration,\n    aws_cognito_mfa_types,\n    aws_cognito_password_protection_settings,\n    aws_cognito_verification_mechanisms,\n    aws_cognito_signup_attributes,\n    aws_cognito_social_providers,\n    aws_cognito_username_attributes,\n    aws_mandatory_sign_in,\n    aws_mobile_analytics_app_id,\n    aws_mobile_analytics_app_region,\n    aws_user_files_s3_bucket,\n    aws_user_files_s3_bucket_region,\n    aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing,\n    aws_user_pools_id,\n    aws_user_pools_web_client_id,\n    geo,\n    oauth,\n    predictions,\n    aws_cloud_logic_custom,\n    Notifications,\n    modelIntrospection\n  } = config;\n  const amplifyConfig = {};\n  // Analytics\n  if (aws_mobile_analytics_app_id) {\n    amplifyConfig.Analytics = {\n      Pinpoint: {\n        appId: aws_mobile_analytics_app_id,\n        region: aws_mobile_analytics_app_region\n      }\n    };\n  }\n  // Notifications\n  const {\n    InAppMessaging,\n    Push\n  } = Notifications ?? {};\n  if (InAppMessaging?.AWSPinpoint || Push?.AWSPinpoint) {\n    if (InAppMessaging?.AWSPinpoint) {\n      const {\n        appId,\n        region\n      } = InAppMessaging.AWSPinpoint;\n      amplifyConfig.Notifications = {\n        InAppMessaging: {\n          Pinpoint: {\n            appId,\n            region\n          }\n        }\n      };\n    }\n    if (Push?.AWSPinpoint) {\n      const {\n        appId,\n        region\n      } = Push.AWSPinpoint;\n      amplifyConfig.Notifications = {\n        PushNotification: {\n          Pinpoint: {\n            appId,\n            region\n          }\n        }\n      };\n    }\n  }\n  // Interactions\n  if (Array.isArray(aws_bots_config)) {\n    amplifyConfig.Interactions = {\n      LexV1: Object.fromEntries(aws_bots_config.map(bot => [bot.name, bot]))\n    };\n  }\n  // API\n  if (aws_appsync_graphqlEndpoint) {\n    const defaultAuthMode = authTypeMapping[aws_appsync_authenticationType];\n    if (!defaultAuthMode) {\n      logger.debug(`Invalid authentication type ${aws_appsync_authenticationType}. Falling back to IAM.`);\n    }\n    amplifyConfig.API = {\n      GraphQL: {\n        endpoint: aws_appsync_graphqlEndpoint,\n        apiKey: aws_appsync_apiKey,\n        region: aws_appsync_region,\n        defaultAuthMode: defaultAuthMode ?? 'iam'\n      }\n    };\n    if (modelIntrospection) {\n      amplifyConfig.API.GraphQL.modelIntrospection = modelIntrospection;\n    }\n  }\n  // Auth\n  const mfaConfig = aws_cognito_mfa_configuration ? {\n    status: aws_cognito_mfa_configuration && aws_cognito_mfa_configuration.toLowerCase(),\n    totpEnabled: aws_cognito_mfa_types?.includes('TOTP') ?? false,\n    smsEnabled: aws_cognito_mfa_types?.includes('SMS') ?? false\n  } : undefined;\n  const passwordFormatConfig = aws_cognito_password_protection_settings ? {\n    minLength: aws_cognito_password_protection_settings.passwordPolicyMinLength,\n    requireLowercase: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes('REQUIRES_LOWERCASE') ?? false,\n    requireUppercase: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes('REQUIRES_UPPERCASE') ?? false,\n    requireNumbers: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes('REQUIRES_NUMBERS') ?? false,\n    requireSpecialCharacters: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes('REQUIRES_SYMBOLS') ?? false\n  } : undefined;\n  const mergedUserAttributes = Array.from(new Set([...(aws_cognito_verification_mechanisms ?? []), ...(aws_cognito_signup_attributes ?? [])]));\n  const userAttributesConfig = mergedUserAttributes.map(s => ({\n    [s.toLowerCase()]: {\n      required: true // All user attributes generated by the CLI will be required\n    }\n  }));\n\n  const loginWithEmailEnabled = aws_cognito_username_attributes?.includes('EMAIL') ?? false;\n  const loginWithPhoneEnabled = aws_cognito_username_attributes?.includes('PHONE_NUMBER') ?? false;\n  if (aws_cognito_identity_pool_id || aws_user_pools_id) {\n    amplifyConfig.Auth = {\n      Cognito: {\n        identityPoolId: aws_cognito_identity_pool_id,\n        allowGuestAccess: aws_mandatory_sign_in !== 'enable',\n        signUpVerificationMethod: aws_cognito_sign_up_verification_method,\n        userAttributes: userAttributesConfig,\n        userPoolClientId: aws_user_pools_web_client_id,\n        userPoolId: aws_user_pools_id,\n        mfa: mfaConfig,\n        passwordFormat: passwordFormatConfig,\n        loginWith: {\n          username: loginWithEmailEnabled || loginWithPhoneEnabled ? false : true,\n          email: loginWithEmailEnabled,\n          phone: loginWithPhoneEnabled\n        }\n      }\n    };\n  }\n  const hasOAuthConfig = oauth ? Object.keys(oauth).length > 0 : false;\n  const hasSocialProviderConfig = aws_cognito_social_providers ? aws_cognito_social_providers.length > 0 : false;\n  if (amplifyConfig.Auth && hasOAuthConfig) {\n    amplifyConfig.Auth.Cognito.loginWith = {\n      ...amplifyConfig.Auth.Cognito.loginWith,\n      oauth: {\n        ...getOAuthConfig(oauth),\n        ...(hasSocialProviderConfig && {\n          providers: parseSocialProviders(aws_cognito_social_providers)\n        })\n      }\n    };\n  }\n  // Storage\n  if (aws_user_files_s3_bucket) {\n    amplifyConfig.Storage = {\n      S3: {\n        bucket: aws_user_files_s3_bucket,\n        region: aws_user_files_s3_bucket_region,\n        dangerouslyConnectToHttpEndpointForTesting: aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing\n      }\n    };\n  }\n  // Geo\n  if (geo) {\n    const {\n      amazon_location_service\n    } = geo;\n    amplifyConfig.Geo = amazon_location_service ? {\n      LocationService: {\n        ...amazon_location_service,\n        searchIndices: amazon_location_service.search_indices,\n        region: amazon_location_service.region\n      }\n    } : {\n      ...geo\n    };\n  }\n  // REST API\n  if (aws_cloud_logic_custom) {\n    amplifyConfig.API = {\n      ...amplifyConfig.API,\n      REST: aws_cloud_logic_custom.reduce((acc, api) => {\n        const {\n          name,\n          endpoint,\n          region,\n          service\n        } = api;\n        return {\n          ...acc,\n          [name]: {\n            endpoint,\n            ...(service ? {\n              service\n            } : undefined),\n            ...(region ? {\n              region\n            } : undefined)\n          }\n        };\n      }, {})\n    };\n  }\n  // Predictions\n  if (predictions) {\n    // map VoiceId from speechGenerator defaults to voiceId\n    const {\n      VoiceId: voiceId\n    } = predictions?.convert?.speechGenerator?.defaults ?? {};\n    amplifyConfig.Predictions = voiceId ? {\n      ...predictions,\n      convert: {\n        ...predictions.convert,\n        speechGenerator: {\n          ...predictions.convert.speechGenerator,\n          defaults: {\n            voiceId\n          }\n        }\n      }\n    } : predictions;\n  }\n  return amplifyConfig;\n};\nconst getRedirectUrl = redirectStr => redirectStr?.split(',') ?? [];\nconst getOAuthConfig = ({\n  domain,\n  scope,\n  redirectSignIn,\n  redirectSignOut,\n  responseType\n}) => ({\n  domain,\n  scopes: scope,\n  redirectSignIn: getRedirectUrl(redirectSignIn),\n  redirectSignOut: getRedirectUrl(redirectSignOut),\n  responseType\n});\nconst parseSocialProviders = aws_cognito_social_providers => {\n  return aws_cognito_social_providers.map(provider => {\n    const updatedProvider = provider.toLowerCase();\n    return updatedProvider.charAt(0).toUpperCase() + updatedProvider.slice(1);\n  });\n};\nexport { parseAWSExports };","map":{"version":3,"names":["logger","ConsoleLogger","authTypeMapping","API_KEY","AWS_IAM","AMAZON_COGNITO_USER_POOLS","OPENID_CONNECT","NONE","LAMBDA","parseAWSExports","config","aws_appsync_apiKey","aws_appsync_authenticationType","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_bots","aws_bots_config","aws_cognito_identity_pool_id","aws_cognito_sign_up_verification_method","aws_cognito_mfa_configuration","aws_cognito_mfa_types","aws_cognito_password_protection_settings","aws_cognito_verification_mechanisms","aws_cognito_signup_attributes","aws_cognito_social_providers","aws_cognito_username_attributes","aws_mandatory_sign_in","aws_mobile_analytics_app_id","aws_mobile_analytics_app_region","aws_user_files_s3_bucket","aws_user_files_s3_bucket_region","aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing","aws_user_pools_id","aws_user_pools_web_client_id","geo","oauth","predictions","aws_cloud_logic_custom","Notifications","modelIntrospection","amplifyConfig","Analytics","Pinpoint","appId","region","InAppMessaging","Push","AWSPinpoint","PushNotification","Array","isArray","Interactions","LexV1","Object","fromEntries","map","bot","name","defaultAuthMode","debug","API","GraphQL","endpoint","apiKey","mfaConfig","status","toLowerCase","totpEnabled","includes","smsEnabled","undefined","passwordFormatConfig","minLength","passwordPolicyMinLength","requireLowercase","passwordPolicyCharacters","requireUppercase","requireNumbers","requireSpecialCharacters","mergedUserAttributes","from","Set","userAttributesConfig","s","required","loginWithEmailEnabled","loginWithPhoneEnabled","Auth","Cognito","identityPoolId","allowGuestAccess","signUpVerificationMethod","userAttributes","userPoolClientId","userPoolId","mfa","passwordFormat","loginWith","username","email","phone","hasOAuthConfig","keys","length","hasSocialProviderConfig","getOAuthConfig","providers","parseSocialProviders","Storage","S3","bucket","dangerouslyConnectToHttpEndpointForTesting","amazon_location_service","Geo","LocationService","searchIndices","search_indices","REST","reduce","acc","api","service","VoiceId","voiceId","convert","speechGenerator","defaults","Predictions","getRedirectUrl","redirectStr","split","domain","scope","redirectSignIn","redirectSignOut","responseType","scopes","provider","updatedProvider","charAt","toUpperCase","slice"],"sources":["/Users/sarimyun/react-native-app/room821_homepage/room821_homepage/node_modules/@aws-amplify/core/src/parseAWSExports.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger } from './Logger';\nconst logger = new ConsoleLogger('parseAWSExports');\nconst authTypeMapping = {\n    API_KEY: 'apiKey',\n    AWS_IAM: 'iam',\n    AMAZON_COGNITO_USER_POOLS: 'userPool',\n    OPENID_CONNECT: 'oidc',\n    NONE: 'none',\n    LAMBDA: 'lambda',\n};\n/**\n * This utility converts the `aws-exports.js` file generated by the Amplify CLI into a {@link ResourcesConfig} object\n * consumable by Amplify.\n *\n * @param config A configuration object from `aws-exports.js`.\n *\n * @returns A {@link ResourcesConfig} object.\n */\nexport const parseAWSExports = (config = {}) => {\n    const { aws_appsync_apiKey, aws_appsync_authenticationType, aws_appsync_graphqlEndpoint, aws_appsync_region, aws_bots, aws_bots_config, aws_cognito_identity_pool_id, aws_cognito_sign_up_verification_method, aws_cognito_mfa_configuration, aws_cognito_mfa_types, aws_cognito_password_protection_settings, aws_cognito_verification_mechanisms, aws_cognito_signup_attributes, aws_cognito_social_providers, aws_cognito_username_attributes, aws_mandatory_sign_in, aws_mobile_analytics_app_id, aws_mobile_analytics_app_region, aws_user_files_s3_bucket, aws_user_files_s3_bucket_region, aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing, aws_user_pools_id, aws_user_pools_web_client_id, geo, oauth, predictions, aws_cloud_logic_custom, Notifications, modelIntrospection, } = config;\n    const amplifyConfig = {};\n    // Analytics\n    if (aws_mobile_analytics_app_id) {\n        amplifyConfig.Analytics = {\n            Pinpoint: {\n                appId: aws_mobile_analytics_app_id,\n                region: aws_mobile_analytics_app_region,\n            },\n        };\n    }\n    // Notifications\n    const { InAppMessaging, Push } = Notifications ?? {};\n    if (InAppMessaging?.AWSPinpoint || Push?.AWSPinpoint) {\n        if (InAppMessaging?.AWSPinpoint) {\n            const { appId, region } = InAppMessaging.AWSPinpoint;\n            amplifyConfig.Notifications = {\n                InAppMessaging: {\n                    Pinpoint: {\n                        appId,\n                        region,\n                    },\n                },\n            };\n        }\n        if (Push?.AWSPinpoint) {\n            const { appId, region } = Push.AWSPinpoint;\n            amplifyConfig.Notifications = {\n                PushNotification: {\n                    Pinpoint: {\n                        appId,\n                        region,\n                    },\n                },\n            };\n        }\n    }\n    // Interactions\n    if (Array.isArray(aws_bots_config)) {\n        amplifyConfig.Interactions = {\n            LexV1: Object.fromEntries(aws_bots_config.map(bot => [bot.name, bot])),\n        };\n    }\n    // API\n    if (aws_appsync_graphqlEndpoint) {\n        const defaultAuthMode = authTypeMapping[aws_appsync_authenticationType];\n        if (!defaultAuthMode) {\n            logger.debug(`Invalid authentication type ${aws_appsync_authenticationType}. Falling back to IAM.`);\n        }\n        amplifyConfig.API = {\n            GraphQL: {\n                endpoint: aws_appsync_graphqlEndpoint,\n                apiKey: aws_appsync_apiKey,\n                region: aws_appsync_region,\n                defaultAuthMode: defaultAuthMode ?? 'iam',\n            },\n        };\n        if (modelIntrospection) {\n            amplifyConfig.API.GraphQL.modelIntrospection = modelIntrospection;\n        }\n    }\n    // Auth\n    const mfaConfig = aws_cognito_mfa_configuration\n        ? {\n            status: aws_cognito_mfa_configuration &&\n                aws_cognito_mfa_configuration.toLowerCase(),\n            totpEnabled: aws_cognito_mfa_types?.includes('TOTP') ?? false,\n            smsEnabled: aws_cognito_mfa_types?.includes('SMS') ?? false,\n        }\n        : undefined;\n    const passwordFormatConfig = aws_cognito_password_protection_settings\n        ? {\n            minLength: aws_cognito_password_protection_settings.passwordPolicyMinLength,\n            requireLowercase: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes('REQUIRES_LOWERCASE') ?? false,\n            requireUppercase: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes('REQUIRES_UPPERCASE') ?? false,\n            requireNumbers: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes('REQUIRES_NUMBERS') ?? false,\n            requireSpecialCharacters: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes('REQUIRES_SYMBOLS') ?? false,\n        }\n        : undefined;\n    const mergedUserAttributes = Array.from(new Set([\n        ...(aws_cognito_verification_mechanisms ?? []),\n        ...(aws_cognito_signup_attributes ?? []),\n    ]));\n    const userAttributesConfig = mergedUserAttributes.map((s) => ({\n        [s.toLowerCase()]: {\n            required: true, // All user attributes generated by the CLI will be required\n        },\n    }));\n    const loginWithEmailEnabled = aws_cognito_username_attributes?.includes('EMAIL') ?? false;\n    const loginWithPhoneEnabled = aws_cognito_username_attributes?.includes('PHONE_NUMBER') ?? false;\n    if (aws_cognito_identity_pool_id || aws_user_pools_id) {\n        amplifyConfig.Auth = {\n            Cognito: {\n                identityPoolId: aws_cognito_identity_pool_id,\n                allowGuestAccess: aws_mandatory_sign_in !== 'enable',\n                signUpVerificationMethod: aws_cognito_sign_up_verification_method,\n                userAttributes: userAttributesConfig,\n                userPoolClientId: aws_user_pools_web_client_id,\n                userPoolId: aws_user_pools_id,\n                mfa: mfaConfig,\n                passwordFormat: passwordFormatConfig,\n                loginWith: {\n                    username: loginWithEmailEnabled || loginWithPhoneEnabled ? false : true,\n                    email: loginWithEmailEnabled,\n                    phone: loginWithPhoneEnabled,\n                },\n            },\n        };\n    }\n    const hasOAuthConfig = oauth ? Object.keys(oauth).length > 0 : false;\n    const hasSocialProviderConfig = aws_cognito_social_providers\n        ? aws_cognito_social_providers.length > 0\n        : false;\n    if (amplifyConfig.Auth && hasOAuthConfig) {\n        amplifyConfig.Auth.Cognito.loginWith = {\n            ...amplifyConfig.Auth.Cognito.loginWith,\n            oauth: {\n                ...getOAuthConfig(oauth),\n                ...(hasSocialProviderConfig && {\n                    providers: parseSocialProviders(aws_cognito_social_providers),\n                }),\n            },\n        };\n    }\n    // Storage\n    if (aws_user_files_s3_bucket) {\n        amplifyConfig.Storage = {\n            S3: {\n                bucket: aws_user_files_s3_bucket,\n                region: aws_user_files_s3_bucket_region,\n                dangerouslyConnectToHttpEndpointForTesting: aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing,\n            },\n        };\n    }\n    // Geo\n    if (geo) {\n        const { amazon_location_service } = geo;\n        amplifyConfig.Geo = amazon_location_service\n            ? {\n                LocationService: {\n                    ...amazon_location_service,\n                    searchIndices: amazon_location_service.search_indices,\n                    region: amazon_location_service.region,\n                },\n            }\n            : { ...geo };\n    }\n    // REST API\n    if (aws_cloud_logic_custom) {\n        amplifyConfig.API = {\n            ...amplifyConfig.API,\n            REST: aws_cloud_logic_custom.reduce((acc, api) => {\n                const { name, endpoint, region, service } = api;\n                return {\n                    ...acc,\n                    [name]: {\n                        endpoint,\n                        ...(service ? { service } : undefined),\n                        ...(region ? { region } : undefined),\n                    },\n                };\n            }, {}),\n        };\n    }\n    // Predictions\n    if (predictions) {\n        // map VoiceId from speechGenerator defaults to voiceId\n        const { VoiceId: voiceId } = predictions?.convert?.speechGenerator?.defaults ?? {};\n        amplifyConfig.Predictions = voiceId\n            ? {\n                ...predictions,\n                convert: {\n                    ...predictions.convert,\n                    speechGenerator: {\n                        ...predictions.convert.speechGenerator,\n                        defaults: { voiceId },\n                    },\n                },\n            }\n            : predictions;\n    }\n    return amplifyConfig;\n};\nconst getRedirectUrl = (redirectStr) => redirectStr?.split(',') ?? [];\nconst getOAuthConfig = ({ domain, scope, redirectSignIn, redirectSignOut, responseType, }) => ({\n    domain,\n    scopes: scope,\n    redirectSignIn: getRedirectUrl(redirectSignIn),\n    redirectSignOut: getRedirectUrl(redirectSignOut),\n    responseType,\n});\nconst parseSocialProviders = (aws_cognito_social_providers) => {\n    return aws_cognito_social_providers.map((provider) => {\n        const updatedProvider = provider.toLowerCase();\n        return updatedProvider.charAt(0).toUpperCase() + updatedProvider.slice(1);\n    });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}