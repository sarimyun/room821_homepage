{"ast":null,"code":"import { assertTokenProviderConfig, decodeJWT } from '@aws-amplify/core/internals/utils';\nimport { initiateAuth } from './clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from './clients/CognitoIdentityProvider/utils.mjs';\nimport { assertAuthTokensWithRefreshToken } from './types.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { getUserContextData } from './userContextData.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst refreshAuthTokens = async _ref => {\n  var _tokens$deviceMetadat, _authConfig$Cognito, _AuthenticationResult;\n  let {\n    tokens,\n    authConfig,\n    username\n  } = _ref;\n  assertTokenProviderConfig(authConfig === null || authConfig === void 0 ? void 0 : authConfig.Cognito);\n  const region = getRegion(authConfig.Cognito.userPoolId);\n  assertAuthTokensWithRefreshToken(tokens);\n  const refreshTokenString = tokens.refreshToken;\n  const AuthParameters = {\n    REFRESH_TOKEN: refreshTokenString\n  };\n  if ((_tokens$deviceMetadat = tokens.deviceMetadata) !== null && _tokens$deviceMetadat !== void 0 && _tokens$deviceMetadat.deviceKey) {\n    AuthParameters['DEVICE_KEY'] = tokens.deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId: authConfig.Cognito.userPoolId,\n    userPoolClientId: authConfig.Cognito.userPoolClientId\n  });\n  const {\n    AuthenticationResult\n  } = await initiateAuth({\n    region\n  }, {\n    ClientId: authConfig === null || authConfig === void 0 || (_authConfig$Cognito = authConfig.Cognito) === null || _authConfig$Cognito === void 0 ? void 0 : _authConfig$Cognito.userPoolClientId,\n    AuthFlow: 'REFRESH_TOKEN_AUTH',\n    AuthParameters,\n    UserContextData\n  });\n  const accessToken = decodeJWT((_AuthenticationResult = AuthenticationResult === null || AuthenticationResult === void 0 ? void 0 : AuthenticationResult.AccessToken) !== null && _AuthenticationResult !== void 0 ? _AuthenticationResult : '');\n  const idToken = AuthenticationResult !== null && AuthenticationResult !== void 0 && AuthenticationResult.IdToken ? decodeJWT(AuthenticationResult.IdToken) : undefined;\n  const iat = accessToken.payload.iat;\n  // This should never happen. If it does, it's a bug from the service.\n  if (!iat) {\n    throw new AuthError({\n      name: 'iatNotFoundException',\n      message: 'iat not found in access token'\n    });\n  }\n  const clockDrift = iat * 1000 - new Date().getTime();\n  return {\n    accessToken,\n    idToken,\n    clockDrift,\n    refreshToken: refreshTokenString,\n    username\n  };\n};\nexport { refreshAuthTokens };","map":{"version":3,"names":["refreshAuthTokens","_ref","_tokens$deviceMetadat","_authConfig$Cognito","_AuthenticationResult","tokens","authConfig","username","assertTokenProviderConfig","Cognito","region","getRegion","userPoolId","assertAuthTokensWithRefreshToken","refreshTokenString","refreshToken","AuthParameters","REFRESH_TOKEN","deviceMetadata","deviceKey","UserContextData","getUserContextData","userPoolClientId","AuthenticationResult","initiateAuth","ClientId","AuthFlow","accessToken","decodeJWT","AccessToken","idToken","IdToken","undefined","iat","payload","AuthError","name","message","clockDrift","Date","getTime"],"sources":["/Users/sarimyun/react-native-app/room821_homepage/room821_homepage/node_modules/@aws-amplify/auth/src/providers/cognito/utils/refreshAuthTokens.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertTokenProviderConfig, decodeJWT, } from '@aws-amplify/core/internals/utils';\nimport { initiateAuth } from '../utils/clients/CognitoIdentityProvider';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils';\nimport { assertAuthTokensWithRefreshToken } from '../utils/types';\nimport { AuthError } from '../../../errors/AuthError';\nimport { getUserContextData } from './userContextData';\nexport const refreshAuthTokens = async ({ tokens, authConfig, username, }) => {\n    assertTokenProviderConfig(authConfig?.Cognito);\n    const region = getRegion(authConfig.Cognito.userPoolId);\n    assertAuthTokensWithRefreshToken(tokens);\n    const refreshTokenString = tokens.refreshToken;\n    const AuthParameters = {\n        REFRESH_TOKEN: refreshTokenString,\n    };\n    if (tokens.deviceMetadata?.deviceKey) {\n        AuthParameters['DEVICE_KEY'] = tokens.deviceMetadata.deviceKey;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId: authConfig.Cognito.userPoolId,\n        userPoolClientId: authConfig.Cognito.userPoolClientId,\n    });\n    const { AuthenticationResult } = await initiateAuth({ region }, {\n        ClientId: authConfig?.Cognito?.userPoolClientId,\n        AuthFlow: 'REFRESH_TOKEN_AUTH',\n        AuthParameters,\n        UserContextData,\n    });\n    const accessToken = decodeJWT(AuthenticationResult?.AccessToken ?? '');\n    const idToken = AuthenticationResult?.IdToken\n        ? decodeJWT(AuthenticationResult.IdToken)\n        : undefined;\n    const iat = accessToken.payload.iat;\n    // This should never happen. If it does, it's a bug from the service.\n    if (!iat) {\n        throw new AuthError({\n            name: 'iatNotFoundException',\n            message: 'iat not found in access token',\n        });\n    }\n    const clockDrift = iat * 1000 - new Date().getTime();\n    return {\n        accessToken,\n        idToken,\n        clockDrift,\n        refreshToken: refreshTokenString,\n        username,\n    };\n};\n"],"mappings":";;;;;;;AAAA;AACA;AAOY,MAACA,iBAAiB,GAAG,MAAAC,IAAA,IAA6C;EAAA,IAAAC,qBAAA,EAAAC,mBAAA,EAAAC,qBAAA;EAAA,IAAtC;IAAEC,MAAM;IAAEC,UAAU;IAAEC;EAAQ,CAAG,GAAAN,IAAA;EACrEO,yBAAyB,CAACF,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEG,OAAO,CAAC;EAC9C,MAAMC,MAAM,GAAGC,SAAS,CAACL,UAAU,CAACG,OAAO,CAACG,UAAU,CAAC;EACvDC,gCAAgC,CAACR,MAAM,CAAC;EACxC,MAAMS,kBAAkB,GAAGT,MAAM,CAACU,YAAY;EAC9C,MAAMC,cAAc,GAAG;IACnBC,aAAa,EAAEH;EACvB,CAAK;EACD,KAAAZ,qBAAA,GAAIG,MAAM,CAACa,cAAc,cAAAhB,qBAAA,eAArBA,qBAAA,CAAuBiB,SAAS,EAAE;IAClCH,cAAc,CAAC,YAAY,CAAC,GAAGX,MAAM,CAACa,cAAc,CAACC,SAAS;EACtE;EACI,MAAMC,eAAe,GAAGC,kBAAkB,CAAC;IACvCd,QAAQ;IACRK,UAAU,EAAEN,UAAU,CAACG,OAAO,CAACG,UAAU;IACzCU,gBAAgB,EAAEhB,UAAU,CAACG,OAAO,CAACa;EAC7C,CAAK,CAAC;EACF,MAAM;IAAEC;EAAoB,CAAE,GAAG,MAAMC,YAAY,CAAC;IAAEd;EAAM,CAAE,EAAE;IAC5De,QAAQ,EAAEnB,UAAU,aAAVA,UAAU,gBAAAH,mBAAA,GAAVG,UAAU,CAAEG,OAAO,cAAAN,mBAAA,uBAAnBA,mBAAA,CAAqBmB,gBAAgB;IAC/CI,QAAQ,EAAE,oBAAoB;IAC9BV,cAAc;IACdI;EACR,CAAK,CAAC;EACF,MAAMO,WAAW,GAAGC,SAAS,EAAAxB,qBAAA,GAACmB,oBAAoB,aAApBA,oBAAoB,uBAApBA,oBAAoB,CAAEM,WAAW,cAAAzB,qBAAA,cAAAA,qBAAA,GAAI,EAAE,CAAC;EACtE,MAAM0B,OAAO,GAAGP,oBAAoB,aAApBA,oBAAoB,eAApBA,oBAAoB,CAAEQ,OAAO,GACvCH,SAAS,CAACL,oBAAoB,CAACQ,OAAO,CAAC,GACvCC,SAAS;EACf,MAAMC,GAAG,GAAGN,WAAW,CAACO,OAAO,CAACD,GAAG;EACvC;EACI,IAAI,CAACA,GAAG,EAAE;IACN,MAAM,IAAIE,SAAS,CAAC;MAChBC,IAAI,EAAE,sBAAsB;MAC5BC,OAAO,EAAE;IACrB,CAAS,CAAC;EACV;EACI,MAAMC,UAAU,GAAGL,GAAG,GAAG,IAAI,GAAG,IAAIM,IAAI,EAAE,CAACC,OAAO,EAAE;EACpD,OAAO;IACHb,WAAW;IACXG,OAAO;IACPQ,UAAU;IACVvB,YAAY,EAAED,kBAAkB;IAChCP;EACR,CAAK;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}