{"ast":null,"code":"import { ConsoleLogger } from '../../Logger/ConsoleLogger.mjs';\nimport { isNonRetryableError } from './isNonRetryableError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('retryUtil');\n/**\n * @private\n * Internal use of Amplify only\n */\nasync function retry(functionToRetry, args, delayFn, onTerminate) {\n  if (typeof functionToRetry !== 'function') {\n    throw Error('functionToRetry must be a function');\n  }\n  return new Promise(async (resolve, reject) => {\n    let attempt = 0;\n    let terminated = false;\n    let timeout;\n    let wakeUp = () => {}; // will be replaced with a resolver()\n    // used after the loop if terminated while waiting for a timer.\n    let lastError;\n    onTerminate && onTerminate.then(() => {\n      // signal not to try anymore.\n      terminated = true;\n      // stop sleeping if we're sleeping.\n      clearTimeout(timeout);\n      wakeUp();\n    });\n    while (!terminated) {\n      attempt++;\n      logger.debug(\"\".concat(functionToRetry.name, \" attempt #\").concat(attempt, \" with this vars: \").concat(JSON.stringify(args)));\n      try {\n        return resolve(await functionToRetry(...args));\n      } catch (err) {\n        lastError = err;\n        logger.debug(\"error on \".concat(functionToRetry.name), err);\n        if (isNonRetryableError(err)) {\n          logger.debug(\"\".concat(functionToRetry.name, \" non retryable error\"), err);\n          return reject(err);\n        }\n        const retryIn = delayFn(attempt, args, err);\n        logger.debug(\"\".concat(functionToRetry.name, \" retrying in \").concat(retryIn, \" ms\"));\n        // we check `terminated` again here because it could have flipped\n        // in the time it took `functionToRetry` to return.\n        if (retryIn === false || terminated) {\n          return reject(err);\n        } else {\n          await new Promise(r => {\n            wakeUp = r; // export wakeUp for onTerminate handling\n            timeout = setTimeout(wakeUp, retryIn);\n          });\n        }\n      }\n    }\n    // reached if terminated while waiting for a timer.\n    reject(lastError);\n  });\n}\nexport { retry };","map":{"version":3,"names":["logger","ConsoleLogger","retry","functionToRetry","args","delayFn","onTerminate","Error","Promise","resolve","reject","attempt","terminated","timeout","wakeUp","lastError","then","clearTimeout","debug","concat","name","JSON","stringify","err","isNonRetryableError","retryIn","r","setTimeout"],"sources":["/Users/sarimyun/react-native-app/room821_homepage/room821_homepage/node_modules/@aws-amplify/core/src/utils/retry/retry.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger } from '../../Logger/ConsoleLogger';\nimport { isNonRetryableError } from './isNonRetryableError';\nconst logger = new ConsoleLogger('retryUtil');\n/**\n * @private\n * Internal use of Amplify only\n */\nexport async function retry(functionToRetry, args, delayFn, onTerminate) {\n    if (typeof functionToRetry !== 'function') {\n        throw Error('functionToRetry must be a function');\n    }\n    return new Promise(async (resolve, reject) => {\n        let attempt = 0;\n        let terminated = false;\n        let timeout;\n        let wakeUp = () => { }; // will be replaced with a resolver()\n        // used after the loop if terminated while waiting for a timer.\n        let lastError;\n        onTerminate &&\n            onTerminate.then(() => {\n                // signal not to try anymore.\n                terminated = true;\n                // stop sleeping if we're sleeping.\n                clearTimeout(timeout);\n                wakeUp();\n            });\n        while (!terminated) {\n            attempt++;\n            logger.debug(`${functionToRetry.name} attempt #${attempt} with this vars: ${JSON.stringify(args)}`);\n            try {\n                return resolve(await functionToRetry(...args));\n            }\n            catch (err) {\n                lastError = err;\n                logger.debug(`error on ${functionToRetry.name}`, err);\n                if (isNonRetryableError(err)) {\n                    logger.debug(`${functionToRetry.name} non retryable error`, err);\n                    return reject(err);\n                }\n                const retryIn = delayFn(attempt, args, err);\n                logger.debug(`${functionToRetry.name} retrying in ${retryIn} ms`);\n                // we check `terminated` again here because it could have flipped\n                // in the time it took `functionToRetry` to return.\n                if (retryIn === false || terminated) {\n                    return reject(err);\n                }\n                else {\n                    await new Promise(r => {\n                        wakeUp = r; // export wakeUp for onTerminate handling\n                        timeout = setTimeout(wakeUp, retryIn);\n                    });\n                }\n            }\n        }\n        // reached if terminated while waiting for a timer.\n        reject(lastError);\n    });\n}\n"],"mappings":";;;AAAA;AACA;AAGA,MAAMA,MAAM,GAAG,IAAIC,aAAa,CAAC,WAAW,CAAC;AAC7C;AACA;AACA;AACA;AACO,eAAeC,KAAKA,CAACC,eAAe,EAAEC,IAAI,EAAEC,OAAO,EAAEC,WAAW,EAAE;EACrE,IAAI,OAAOH,eAAe,KAAK,UAAU,EAAE;IACvC,MAAMI,KAAK,CAAC,oCAAoC,CAAC;EACzD;EACI,OAAO,IAAIC,OAAO,CAAC,OAAOC,OAAO,EAAEC,MAAM,KAAK;IAC1C,IAAIC,OAAO,GAAG,CAAC;IACf,IAAIC,UAAU,GAAG,KAAK;IACtB,IAAIC,OAAO;IACX,IAAIC,MAAM,GAAGA,CAAA,KAAM,EAAG,CAAC;IAC/B;IACQ,IAAIC,SAAS;IACbT,WAAW,IACPA,WAAW,CAACU,IAAI,CAAC,MAAM;MACnC;MACgBJ,UAAU,GAAG,IAAI;MACjC;MACgBK,YAAY,CAACJ,OAAO,CAAC;MACrBC,MAAM,EAAE;IACxB,CAAa,CAAC;IACN,OAAO,CAACF,UAAU,EAAE;MAChBD,OAAO,EAAE;MACTX,MAAM,CAACkB,KAAK,IAAAC,MAAA,CAAIhB,eAAe,CAACiB,IAAI,gBAAAD,MAAA,CAAaR,OAAO,uBAAAQ,MAAA,CAAoBE,IAAI,CAACC,SAAS,CAAClB,IAAI,CAAC,CAAE,CAAC;MACnG,IAAI;QACA,OAAOK,OAAO,CAAC,MAAMN,eAAe,CAAC,GAAGC,IAAI,CAAC,CAAC;MAC9D,CAAa,CACD,OAAOmB,GAAG,EAAE;QACRR,SAAS,GAAGQ,GAAG;QACfvB,MAAM,CAACkB,KAAK,aAAAC,MAAA,CAAahB,eAAe,CAACiB,IAAI,GAAIG,GAAG,CAAC;QACrD,IAAIC,mBAAmB,CAACD,GAAG,CAAC,EAAE;UAC1BvB,MAAM,CAACkB,KAAK,IAAAC,MAAA,CAAIhB,eAAe,CAACiB,IAAI,2BAAwBG,GAAG,CAAC;UAChE,OAAOb,MAAM,CAACa,GAAG,CAAC;QACtC;QACgB,MAAME,OAAO,GAAGpB,OAAO,CAACM,OAAO,EAAEP,IAAI,EAAEmB,GAAG,CAAC;QAC3CvB,MAAM,CAACkB,KAAK,IAAAC,MAAA,CAAIhB,eAAe,CAACiB,IAAI,mBAAAD,MAAA,CAAgBM,OAAO,QAAK,CAAC;QACjF;QACA;QACgB,IAAIA,OAAO,KAAK,KAAK,IAAIb,UAAU,EAAE;UACjC,OAAOF,MAAM,CAACa,GAAG,CAAC;QACtC,CAAiB,MACI;UACD,MAAM,IAAIf,OAAO,CAACkB,CAAC,IAAI;YACnBZ,MAAM,GAAGY,CAAC,CAAC;YACXb,OAAO,GAAGc,UAAU,CAACb,MAAM,EAAEW,OAAO,CAAC;UAC7D,CAAqB,CAAC;QACtB;MACA;IACA;IACA;IACQf,MAAM,CAACK,SAAS,CAAC;EACzB,CAAK,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}