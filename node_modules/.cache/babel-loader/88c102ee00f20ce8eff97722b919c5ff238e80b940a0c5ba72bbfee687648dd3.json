{"ast":null,"code":"import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { deleteUser as deleteUser$1 } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/index.mjs';\nimport { signOut } from './signOut.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Deletes a user from the user pool while authenticated.\n *\n * @throws - {@link DeleteUserException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function deleteUser() {\n  var _Amplify$getConfig$Au;\n  const authConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    tokens\n  } = await fetchAuthSession();\n  assertAuthTokens(tokens);\n  await deleteUser$1({\n    region: getRegion(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.DeleteUser)\n  }, {\n    AccessToken: tokens.accessToken.toString()\n  });\n  await tokenOrchestrator.clearDeviceMetadata();\n  await signOut();\n}\nexport { deleteUser };","map":{"version":3,"names":["deleteUser","_Amplify$getConfig$Au","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","tokens","fetchAuthSession","assertAuthTokens","deleteUser$1","region","getRegion","userPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","DeleteUser","AccessToken","accessToken","toString","tokenOrchestrator","clearDeviceMetadata","signOut"],"sources":["/Users/sarimyun/react-native-app/room821_homepage/room821_homepage/node_modules/@aws-amplify/auth/src/providers/cognito/apis/deleteUser.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction, } from '@aws-amplify/core/internals/utils';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils';\nimport { assertAuthTokens } from '../utils/types';\nimport { deleteUser as serviceDeleteUser } from '../utils/clients/CognitoIdentityProvider';\nimport { tokenOrchestrator } from '../tokenProvider';\nimport { signOut } from './signOut';\nimport { getAuthUserAgentValue } from '../../../utils';\n/**\n * Deletes a user from the user pool while authenticated.\n *\n * @throws - {@link DeleteUserException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function deleteUser() {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { tokens } = await fetchAuthSession();\n    assertAuthTokens(tokens);\n    await serviceDeleteUser({\n        region: getRegion(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.DeleteUser),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n    });\n    await tokenOrchestrator.clearDeviceMetadata();\n    await signOut();\n}\n"],"mappings":";;;;;;;;;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,UAAUA,CAAA,EAAG;EAAA,IAAAC,qBAAA;EAC/B,MAAMC,UAAU,IAAAD,qBAAA,GAAGE,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,cAAAJ,qBAAA,uBAAxBA,qBAAA,CAA0BK,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM;EAAM,CAAE,GAAG,MAAMC,gBAAgB,EAAE;EAC3CC,gBAAgB,CAACF,MAAM,CAAC;EACxB,MAAMG,YAAiB,CAAC;IACpBC,MAAM,EAAEC,SAAS,CAACX,UAAU,CAACY,UAAU,CAAC;IACxCC,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,UAAU;EACnE,CAAK,EAAE;IACCC,WAAW,EAAEX,MAAM,CAACY,WAAW,CAACC,QAAQ;EAChD,CAAK,CAAC;EACF,MAAMC,iBAAiB,CAACC,mBAAmB,EAAE;EAC7C,MAAMC,OAAO,EAAE;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}