{"ast":null,"code":"import { withMemoization } from '../utils/memoization.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst shouldSendBody = method => !['HEAD', 'GET', 'DELETE'].includes(method.toUpperCase());\n// TODO[AllanZhengYP]: we need to provide isCanceledError utility\nconst fetchTransferHandler = async (_ref, _ref2) => {\n  var _resp$headers, _resp$body;\n  let {\n    url,\n    method,\n    headers,\n    body\n  } = _ref;\n  let {\n    abortSignal,\n    cache,\n    withCrossDomainCredentials\n  } = _ref2;\n  let resp;\n  try {\n    resp = await fetch(url, {\n      method,\n      headers,\n      body: shouldSendBody(method) ? body : undefined,\n      signal: abortSignal,\n      cache,\n      credentials: withCrossDomainCredentials ? 'include' : 'same-origin'\n    });\n  } catch (e) {\n    // TODO: needs to revise error handling in v6\n    // For now this is a thin wrapper over original fetch error similar to cognito-identity-js package.\n    // Ref: https://github.com/aws-amplify/amplify-js/blob/4fbc8c0a2be7526aab723579b4c95b552195a80b/packages/amazon-cognito-identity-js/src/Client.js#L103-L108\n    if (e instanceof TypeError) {\n      throw new Error('Network error');\n    }\n    throw e;\n  }\n  const responseHeaders = {};\n  (_resp$headers = resp.headers) === null || _resp$headers === void 0 || _resp$headers.forEach((value, key) => {\n    responseHeaders[key.toLowerCase()] = value;\n  });\n  const httpResponse = {\n    statusCode: resp.status,\n    headers: responseHeaders,\n    body: null\n  };\n  // resp.body is a ReadableStream according to Fetch API spec, but React Native\n  // does not implement it.\n  const bodyWithMixin = Object.assign((_resp$body = resp.body) !== null && _resp$body !== void 0 ? _resp$body : {}, {\n    text: withMemoization(() => resp.text()),\n    blob: withMemoization(() => resp.blob()),\n    json: withMemoization(() => resp.json())\n  });\n  return {\n    ...httpResponse,\n    body: bodyWithMixin\n  };\n};\nexport { fetchTransferHandler };","map":{"version":3,"names":["shouldSendBody","method","includes","toUpperCase","fetchTransferHandler","_ref","_ref2","_resp$headers","_resp$body","url","headers","body","abortSignal","cache","withCrossDomainCredentials","resp","fetch","undefined","signal","credentials","e","TypeError","Error","responseHeaders","forEach","value","key","toLowerCase","httpResponse","statusCode","status","bodyWithMixin","Object","assign","text","withMemoization","blob","json"],"sources":["/Users/sarimyun/react-native-app/room821_homepage/room821_homepage/node_modules/@aws-amplify/core/src/clients/handlers/fetch.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { withMemoization } from '../utils/memoization';\nconst shouldSendBody = (method) => !['HEAD', 'GET', 'DELETE'].includes(method.toUpperCase());\n// TODO[AllanZhengYP]: we need to provide isCanceledError utility\nexport const fetchTransferHandler = async ({ url, method, headers, body }, { abortSignal, cache, withCrossDomainCredentials }) => {\n    let resp;\n    try {\n        resp = await fetch(url, {\n            method,\n            headers,\n            body: shouldSendBody(method) ? body : undefined,\n            signal: abortSignal,\n            cache,\n            credentials: withCrossDomainCredentials ? 'include' : 'same-origin',\n        });\n    }\n    catch (e) {\n        // TODO: needs to revise error handling in v6\n        // For now this is a thin wrapper over original fetch error similar to cognito-identity-js package.\n        // Ref: https://github.com/aws-amplify/amplify-js/blob/4fbc8c0a2be7526aab723579b4c95b552195a80b/packages/amazon-cognito-identity-js/src/Client.js#L103-L108\n        if (e instanceof TypeError) {\n            throw new Error('Network error');\n        }\n        throw e;\n    }\n    const responseHeaders = {};\n    resp.headers?.forEach((value, key) => {\n        responseHeaders[key.toLowerCase()] = value;\n    });\n    const httpResponse = {\n        statusCode: resp.status,\n        headers: responseHeaders,\n        body: null,\n    };\n    // resp.body is a ReadableStream according to Fetch API spec, but React Native\n    // does not implement it.\n    const bodyWithMixin = Object.assign(resp.body ?? {}, {\n        text: withMemoization(() => resp.text()),\n        blob: withMemoization(() => resp.blob()),\n        json: withMemoization(() => resp.json()),\n    });\n    return {\n        ...httpResponse,\n        body: bodyWithMixin,\n    };\n};\n"],"mappings":";;AAAA;AACA;AAEA,MAAMA,cAAc,GAAIC,MAAM,IAAK,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAACC,QAAQ,CAACD,MAAM,CAACE,WAAW,EAAE,CAAC;AAC5F;AACY,MAACC,oBAAoB,GAAG,MAAAA,CAAAC,IAAA,EAAAC,KAAA,KAA8F;EAAA,IAAAC,aAAA,EAAAC,UAAA;EAAA,IAAvF;IAAEC,GAAG;IAAER,MAAM;IAAES,OAAO;IAAEC;EAAI,CAAE,GAAAN,IAAA;EAAA,IAAE;IAAEO,WAAW;IAAEC,KAAK;IAAEC;EAA0B,CAAE,GAAAR,KAAA;EACzH,IAAIS,IAAI;EACR,IAAI;IACAA,IAAI,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAE;MACpBR,MAAM;MACNS,OAAO;MACPC,IAAI,EAAEX,cAAc,CAACC,MAAM,CAAC,GAAGU,IAAI,GAAGM,SAAS;MAC/CC,MAAM,EAAEN,WAAW;MACnBC,KAAK;MACLM,WAAW,EAAEL,0BAA0B,GAAG,SAAS,GAAG;IAClE,CAAS,CAAC;EACV,CAAK,CACD,OAAOM,CAAC,EAAE;IACd;IACA;IACA;IACQ,IAAIA,CAAC,YAAYC,SAAS,EAAE;MACxB,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;IAC5C;IACQ,MAAMF,CAAC;EACf;EACI,MAAMG,eAAe,GAAG,EAAE;EAC1B,CAAAhB,aAAA,GAAAQ,IAAI,CAACL,OAAO,cAAAH,aAAA,eAAZA,aAAA,CAAciB,OAAO,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAK;IAClCH,eAAe,CAACG,GAAG,CAACC,WAAW,EAAE,CAAC,GAAGF,KAAK;EAClD,CAAK,CAAC;EACF,MAAMG,YAAY,GAAG;IACjBC,UAAU,EAAEd,IAAI,CAACe,MAAM;IACvBpB,OAAO,EAAEa,eAAe;IACxBZ,IAAI,EAAE;EACd,CAAK;EACL;EACA;EACI,MAAMoB,aAAa,GAAGC,MAAM,CAACC,MAAM,EAAAzB,UAAA,GAACO,IAAI,CAACJ,IAAI,cAAAH,UAAA,cAAAA,UAAA,GAAI,EAAE,EAAE;IACjD0B,IAAI,EAAEC,eAAe,CAAC,MAAMpB,IAAI,CAACmB,IAAI,EAAE,CAAC;IACxCE,IAAI,EAAED,eAAe,CAAC,MAAMpB,IAAI,CAACqB,IAAI,EAAE,CAAC;IACxCC,IAAI,EAAEF,eAAe,CAAC,MAAMpB,IAAI,CAACsB,IAAI,EAAE;EAC/C,CAAK,CAAC;EACF,OAAO;IACH,GAAGT,YAAY;IACfjB,IAAI,EAAEoB;EACd,CAAK;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}