{"ast":null,"code":"import { ConsoleLogger } from '../Logger/ConsoleLogger.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('I18n');\n/**\n * Language translation utility.\n */\nlet I18n$1 = class I18n {\n  /**\n   * @constructor\n   * Initialize with configurations\n   * @param {Object} options\n   */\n  constructor() {\n    /**\n     * @private\n     */\n    this._options = null;\n    /**\n     * @private\n     */\n    this._lang = null;\n    /**\n     * @private\n     */\n    this._dict = {};\n  }\n  /**\n   * Sets the default language from the configuration when required.\n   */\n  setDefaultLanguage() {\n    // Default to window language if not set in instance\n    if (!this._lang && typeof window !== 'undefined' && window && window.navigator) {\n      this._lang = window.navigator.language;\n    }\n    logger.debug(this._lang);\n  }\n  /**\n   * @method\n   * Explicitly setting language\n   * @param {String} lang\n   */\n  setLanguage(lang) {\n    this._lang = lang;\n  }\n  /**\n   * @method\n   * Get value\n   * @param {String} key\n   * @param {String} defVal - Default value\n   */\n  get(key) {\n    let defVal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    if (!this._lang) {\n      return typeof defVal !== 'undefined' ? defVal : key;\n    }\n    const lang = this._lang;\n    let val = this.getByLanguage(key, lang);\n    if (val) {\n      return val;\n    }\n    if (lang.indexOf('-') > 0) {\n      val = this.getByLanguage(key, lang.split('-')[0]);\n    }\n    if (val) {\n      return val;\n    }\n    return typeof defVal !== 'undefined' ? defVal : key;\n  }\n  /**\n   * @method\n   * Get value according to specified language\n   * @param {String} key\n   * @param {String} language - Specified langurage to be used\n   * @param {String} defVal - Default value\n   */\n  getByLanguage(key, language) {\n    let defVal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    if (!language) {\n      return defVal;\n    }\n    const lang_dict = this._dict[language];\n    if (!lang_dict) {\n      return defVal;\n    }\n    return lang_dict[key];\n  }\n  /**\n   * @method\n   * Add vocabularies for one language\n   * @param {String} language - Language of the dictionary\n   * @param {Object} vocabularies - Object that has key-value as dictionary entry\n   */\n  putVocabulariesForLanguage(language, vocabularies) {\n    let lang_dict = this._dict[language];\n    if (!lang_dict) {\n      lang_dict = this._dict[language] = {};\n    }\n    this._dict[language] = {\n      ...lang_dict,\n      ...vocabularies\n    };\n  }\n  /**\n   * @method\n   * Add vocabularies for one language\n   * @param {Object} vocabularies - Object that has language as key,\n   *                                vocabularies of each language as value\n   */\n  putVocabularies(vocabularies) {\n    Object.keys(vocabularies).map(key => {\n      this.putVocabulariesForLanguage(key, vocabularies[key]);\n    });\n  }\n};\nexport { I18n$1 as I18n };","map":{"version":3,"names":["logger","ConsoleLogger","I18n","constructor","_options","_lang","_dict","setDefaultLanguage","window","navigator","language","debug","setLanguage","lang","get","key","defVal","arguments","length","undefined","val","getByLanguage","indexOf","split","lang_dict","putVocabulariesForLanguage","vocabularies","putVocabularies","Object","keys","map"],"sources":["/Users/sarimyun/react-native-app/room821_homepage/room821_homepage/node_modules/@aws-amplify/core/src/I18n/I18n.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger } from '../Logger';\nconst logger = new ConsoleLogger('I18n');\n/**\n * Language translation utility.\n */\nexport class I18n {\n    /**\n     * @constructor\n     * Initialize with configurations\n     * @param {Object} options\n     */\n    constructor() {\n        /**\n         * @private\n         */\n        this._options = null;\n        /**\n         * @private\n         */\n        this._lang = null;\n        /**\n         * @private\n         */\n        this._dict = {};\n    }\n    /**\n     * Sets the default language from the configuration when required.\n     */\n    setDefaultLanguage() {\n        // Default to window language if not set in instance\n        if (!this._lang &&\n            typeof window !== 'undefined' &&\n            window &&\n            window.navigator) {\n            this._lang = window.navigator.language;\n        }\n        logger.debug(this._lang);\n    }\n    /**\n     * @method\n     * Explicitly setting language\n     * @param {String} lang\n     */\n    setLanguage(lang) {\n        this._lang = lang;\n    }\n    /**\n     * @method\n     * Get value\n     * @param {String} key\n     * @param {String} defVal - Default value\n     */\n    get(key, defVal = undefined) {\n        if (!this._lang) {\n            return typeof defVal !== 'undefined' ? defVal : key;\n        }\n        const lang = this._lang;\n        let val = this.getByLanguage(key, lang);\n        if (val) {\n            return val;\n        }\n        if (lang.indexOf('-') > 0) {\n            val = this.getByLanguage(key, lang.split('-')[0]);\n        }\n        if (val) {\n            return val;\n        }\n        return typeof defVal !== 'undefined' ? defVal : key;\n    }\n    /**\n     * @method\n     * Get value according to specified language\n     * @param {String} key\n     * @param {String} language - Specified langurage to be used\n     * @param {String} defVal - Default value\n     */\n    getByLanguage(key, language, defVal = null) {\n        if (!language) {\n            return defVal;\n        }\n        const lang_dict = this._dict[language];\n        if (!lang_dict) {\n            return defVal;\n        }\n        return lang_dict[key];\n    }\n    /**\n     * @method\n     * Add vocabularies for one language\n     * @param {String} language - Language of the dictionary\n     * @param {Object} vocabularies - Object that has key-value as dictionary entry\n     */\n    putVocabulariesForLanguage(language, vocabularies) {\n        let lang_dict = this._dict[language];\n        if (!lang_dict) {\n            lang_dict = this._dict[language] = {};\n        }\n        this._dict[language] = { ...lang_dict, ...vocabularies };\n    }\n    /**\n     * @method\n     * Add vocabularies for one language\n     * @param {Object} vocabularies - Object that has language as key,\n     *                                vocabularies of each language as value\n     */\n    putVocabularies(vocabularies) {\n        Object.keys(vocabularies).map(key => {\n            this.putVocabulariesForLanguage(key, vocabularies[key]);\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}