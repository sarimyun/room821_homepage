{"ast":null,"code":"import { LogType } from './types.mjs';\nimport { AWS_CLOUDWATCH_CATEGORY } from '../constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst LOG_LEVELS = {\n  VERBOSE: 1,\n  DEBUG: 2,\n  INFO: 3,\n  WARN: 4,\n  ERROR: 5\n};\n/**\n * Write logs\n * @class Logger\n */\nclass ConsoleLogger {\n  /**\n   * @constructor\n   * @param {string} name - Name of the logger\n   */\n  constructor(name) {\n    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LogType.WARN;\n    this.name = name;\n    this.level = level;\n    this._pluggables = [];\n  }\n  _padding(n) {\n    return n < 10 ? '0' + n : '' + n;\n  }\n  _ts() {\n    const dt = new Date();\n    return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(':') + '.' + dt.getMilliseconds();\n  }\n  configure(config) {\n    if (!config) return this._config;\n    this._config = config;\n    return this._config;\n  }\n  /**\n   * Write log\n   * @method\n   * @memeberof Logger\n   * @param {LogType|string} type - log type, default INFO\n   * @param {string|object} msg - Logging message or object\n   */\n  _log(type) {\n    let logger_level_name = this.level;\n    if (ConsoleLogger.LOG_LEVEL) {\n      logger_level_name = ConsoleLogger.LOG_LEVEL;\n    }\n    if (typeof window !== 'undefined' && window.LOG_LEVEL) {\n      logger_level_name = window.LOG_LEVEL;\n    }\n    const logger_level = LOG_LEVELS[logger_level_name];\n    const type_level = LOG_LEVELS[type];\n    if (!(type_level >= logger_level)) {\n      // Do nothing if type is not greater than or equal to logger level (handle undefined)\n      return;\n    }\n    let log = console.log.bind(console);\n    if (type === LogType.ERROR && console.error) {\n      log = console.error.bind(console);\n    }\n    if (type === LogType.WARN && console.warn) {\n      log = console.warn.bind(console);\n    }\n    const prefix = \"[\".concat(type, \"] \").concat(this._ts(), \" \").concat(this.name);\n    let message = '';\n    for (var _len = arguments.length, msg = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      msg[_key - 1] = arguments[_key];\n    }\n    if (msg.length === 1 && typeof msg[0] === 'string') {\n      message = \"\".concat(prefix, \" - \").concat(msg[0]);\n      log(message);\n    } else if (msg.length === 1) {\n      message = \"\".concat(prefix, \" \").concat(msg[0]);\n      log(prefix, msg[0]);\n    } else if (typeof msg[0] === 'string') {\n      let obj = msg.slice(1);\n      if (obj.length === 1) {\n        obj = obj[0];\n      }\n      message = \"\".concat(prefix, \" - \").concat(msg[0], \" \").concat(obj);\n      log(\"\".concat(prefix, \" - \").concat(msg[0]), obj);\n    } else {\n      message = \"\".concat(prefix, \" \").concat(msg);\n      log(prefix, msg);\n    }\n    for (const plugin of this._pluggables) {\n      const logEvent = {\n        message,\n        timestamp: Date.now()\n      };\n      plugin.pushLogs([logEvent]);\n    }\n  }\n  /**\n   * Write General log. Default to INFO\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  log() {\n    for (var _len2 = arguments.length, msg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      msg[_key2] = arguments[_key2];\n    }\n    this._log(LogType.INFO, ...msg);\n  }\n  /**\n   * Write INFO log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  info() {\n    for (var _len3 = arguments.length, msg = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      msg[_key3] = arguments[_key3];\n    }\n    this._log(LogType.INFO, ...msg);\n  }\n  /**\n   * Write WARN log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  warn() {\n    for (var _len4 = arguments.length, msg = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      msg[_key4] = arguments[_key4];\n    }\n    this._log(LogType.WARN, ...msg);\n  }\n  /**\n   * Write ERROR log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  error() {\n    for (var _len5 = arguments.length, msg = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      msg[_key5] = arguments[_key5];\n    }\n    this._log(LogType.ERROR, ...msg);\n  }\n  /**\n   * Write DEBUG log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  debug() {\n    for (var _len6 = arguments.length, msg = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      msg[_key6] = arguments[_key6];\n    }\n    this._log(LogType.DEBUG, ...msg);\n  }\n  /**\n   * Write VERBOSE log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  verbose() {\n    for (var _len7 = arguments.length, msg = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      msg[_key7] = arguments[_key7];\n    }\n    this._log(LogType.VERBOSE, ...msg);\n  }\n  addPluggable(pluggable) {\n    if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {\n      this._pluggables.push(pluggable);\n      pluggable.configure(this._config);\n    }\n  }\n  listPluggables() {\n    return this._pluggables;\n  }\n}\nConsoleLogger.LOG_LEVEL = null;\nexport { ConsoleLogger };","map":{"version":3,"names":["LOG_LEVELS","VERBOSE","DEBUG","INFO","WARN","ERROR","ConsoleLogger","constructor","name","level","arguments","length","undefined","LogType","_pluggables","_padding","n","_ts","dt","Date","getMinutes","getSeconds","join","getMilliseconds","configure","config","_config","_log","type","logger_level_name","LOG_LEVEL","window","logger_level","type_level","log","console","bind","error","warn","prefix","concat","message","_len","msg","Array","_key","obj","slice","plugin","logEvent","timestamp","now","pushLogs","_len2","_key2","info","_len3","_key3","_len4","_key4","_len5","_key5","debug","_len6","_key6","verbose","_len7","_key7","addPluggable","pluggable","getCategoryName","AWS_CLOUDWATCH_CATEGORY","push","listPluggables"],"sources":["/Users/sarimyun/react-native-app/room821_homepage/room821_homepage/node_modules/@aws-amplify/core/src/Logger/ConsoleLogger.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { LogType } from './types';\nimport { AWS_CLOUDWATCH_CATEGORY } from '../constants';\nconst LOG_LEVELS = {\n    VERBOSE: 1,\n    DEBUG: 2,\n    INFO: 3,\n    WARN: 4,\n    ERROR: 5,\n};\n/**\n * Write logs\n * @class Logger\n */\nclass ConsoleLogger {\n    /**\n     * @constructor\n     * @param {string} name - Name of the logger\n     */\n    constructor(name, level = LogType.WARN) {\n        this.name = name;\n        this.level = level;\n        this._pluggables = [];\n    }\n    _padding(n) {\n        return n < 10 ? '0' + n : '' + n;\n    }\n    _ts() {\n        const dt = new Date();\n        return ([this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(':') +\n            '.' +\n            dt.getMilliseconds());\n    }\n    configure(config) {\n        if (!config)\n            return this._config;\n        this._config = config;\n        return this._config;\n    }\n    /**\n     * Write log\n     * @method\n     * @memeberof Logger\n     * @param {LogType|string} type - log type, default INFO\n     * @param {string|object} msg - Logging message or object\n     */\n    _log(type, ...msg) {\n        let logger_level_name = this.level;\n        if (ConsoleLogger.LOG_LEVEL) {\n            logger_level_name = ConsoleLogger.LOG_LEVEL;\n        }\n        if (typeof window !== 'undefined' && window.LOG_LEVEL) {\n            logger_level_name = window.LOG_LEVEL;\n        }\n        const logger_level = LOG_LEVELS[logger_level_name];\n        const type_level = LOG_LEVELS[type];\n        if (!(type_level >= logger_level)) {\n            // Do nothing if type is not greater than or equal to logger level (handle undefined)\n            return;\n        }\n        let log = console.log.bind(console);\n        if (type === LogType.ERROR && console.error) {\n            log = console.error.bind(console);\n        }\n        if (type === LogType.WARN && console.warn) {\n            log = console.warn.bind(console);\n        }\n        const prefix = `[${type}] ${this._ts()} ${this.name}`;\n        let message = '';\n        if (msg.length === 1 && typeof msg[0] === 'string') {\n            message = `${prefix} - ${msg[0]}`;\n            log(message);\n        }\n        else if (msg.length === 1) {\n            message = `${prefix} ${msg[0]}`;\n            log(prefix, msg[0]);\n        }\n        else if (typeof msg[0] === 'string') {\n            let obj = msg.slice(1);\n            if (obj.length === 1) {\n                obj = obj[0];\n            }\n            message = `${prefix} - ${msg[0]} ${obj}`;\n            log(`${prefix} - ${msg[0]}`, obj);\n        }\n        else {\n            message = `${prefix} ${msg}`;\n            log(prefix, msg);\n        }\n        for (const plugin of this._pluggables) {\n            const logEvent = { message, timestamp: Date.now() };\n            plugin.pushLogs([logEvent]);\n        }\n    }\n    /**\n     * Write General log. Default to INFO\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    log(...msg) {\n        this._log(LogType.INFO, ...msg);\n    }\n    /**\n     * Write INFO log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    info(...msg) {\n        this._log(LogType.INFO, ...msg);\n    }\n    /**\n     * Write WARN log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    warn(...msg) {\n        this._log(LogType.WARN, ...msg);\n    }\n    /**\n     * Write ERROR log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    error(...msg) {\n        this._log(LogType.ERROR, ...msg);\n    }\n    /**\n     * Write DEBUG log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    debug(...msg) {\n        this._log(LogType.DEBUG, ...msg);\n    }\n    /**\n     * Write VERBOSE log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    verbose(...msg) {\n        this._log(LogType.VERBOSE, ...msg);\n    }\n    addPluggable(pluggable) {\n        if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {\n            this._pluggables.push(pluggable);\n            pluggable.configure(this._config);\n        }\n    }\n    listPluggables() {\n        return this._pluggables;\n    }\n}\nConsoleLogger.LOG_LEVEL = null;\nexport { ConsoleLogger };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}